#ifndef _INCLUDE_VGE_H
#define _INCLUDE_VGE_H

#ifdef __cplusplus
extern "C" {
#endif

/*
 *----------------------------------------------------------------------------
 * アプリケーション名
 *----------------------------------------------------------------------------
 */
#define APPNAME "VIDEO GAME SYSTEM"

/*
 *----------------------------------------------------------------------------
 * 画面サイズ：
 * ここを調整すればHVGA(320x480)等の画面サイズに対応できる.
 * ビデオゲームのデファクトスタンダード = QVGA(240x320又は320x240).
 * それは過去の話しだが、色々なハードへの移植に適しているメリットがある.
 *----------------------------------------------------------------------------
 */
#ifdef VGE_LANDSCAPE
#define XSIZE 320
#define YSIZE 240
#else
#define XSIZE 240
#define YSIZE 320
#endif

/*
 *----------------------------------------------------------------------------
 * データ型の宣言
 *----------------------------------------------------------------------------
 */

/* 8bit符号付き */
#ifndef INT8
#define INT8 char
#endif

/* 8bit符号なし */
#ifndef UINT8
#define UINT8
#endif

/* 16ビット符号付き */
#ifndef INT16
#define INT16 short
#endif

/* 16ビット符号なし */
#ifndef UINT16
#define UINT16 unsigned short
#endif

/* 32ビット符号付き */
#ifndef INT32
#define INT32 int
#endif

/* 32ビット符号なし */
#ifndef UINT32
#define UINT32 unsigned int
#endif

/*
 *----------------------------------------------------------------------------
 * ログ出力ルーチン
 *----------------------------------------------------------------------------
 */
void putlog(const char* fn,int ln,const char* msg,...);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_init: 初期化（ゲーム処理で実装する）
 *----------------------------------------------------------------------------
 * 戻り値: 成功は0、失敗時は非0を返すこと.
 *----------------------------------------------------------------------------
 */
int vge_init();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_loop: フレーム間隔(60fps)毎の処理（ゲーム処理で実装する）
 *----------------------------------------------------------------------------
 * 戻り値: 成功は0、失敗時は非0を返すこと.
 *----------------------------------------------------------------------------
 */
int vge_loop();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_pause: ポーズ処理（ゲーム処理で実装する）
 *----------------------------------------------------------------------------
 * 戻り値: 成功は0、失敗時は非0を返すこと.
 *----------------------------------------------------------------------------
 */
int vge_pause();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_term: 終了処理（ゲーム処理で実装する）
 *----------------------------------------------------------------------------
 * 戻り値: 成功は0、失敗時は非0を返すこと.
 *----------------------------------------------------------------------------
 */
int vge_term();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_reset: ソフトウェアリセット
 *----------------------------------------------------------------------------
 * 戻り値: 成功は0、失敗時は非0を返すこと.
 *----------------------------------------------------------------------------
 */
void vge_reset();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_gload: グラフィック(独自形式)をスロットにロードする
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] スロット番号
 * - name [I] ファイル名
 *----------------------------------------------------------------------------
 * 戻り値: 成功は0、失敗時は非0を返す.
 *----------------------------------------------------------------------------
 * 解説:
 * - VRAMのパレット情報は、ロードしたグラフィックのパレット情報に上書きされる.
 * - スロット番号とは、画像の保管庫を意味する識別子である.
 *   (vge_put を呼び出す際に用いる)
 * - スロットの情報は、プログラム停止時にVGEが自動的に開放する.
 * - 既にロード済みのスロットに再ロードを行った場合、以前のスロットの情報は、
 *   自動的に破棄される.
 * - スロットの格納領域はヒープ領域であるため、ロードはvge_init内でのみ行う事
 *   を推奨する.
 *----------------------------------------------------------------------------
 */
int vge_gload(unsigned char n,const char* name);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_putBG: スロットデータをBG領域へ転送する
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] スロット番号
 * - sx [I] スロット上のX座標
 * - sy [I] スロット上のY座標
 * - xs [I] 幅
 * - ys [I] 高さ
 * - dx [I] VRAMのX座標
 * - dy [I] VRAMのY座標
 *----------------------------------------------------------------------------
 * 解説:
 * - BGは一度書いたら消えない
 * - 存在しないスロット番号を指定した場合、何も表示せずにリターンする
 * - スロット外の領域を指定した場合、何も表示せずにリターンする
 * - VRAMからはみ出る部分の領域は表示しない
 *----------------------------------------------------------------------------
 */
void vge_putBG(unsigned char n,int sx,int sy,int xs,int ys,int dx,int dy);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_putBG2: パレット0を描画しないvge_putBG
 * 引数: vge_putBGと同じ
 *----------------------------------------------------------------------------
 */
void vge_putBG2(unsigned char n,int sx,int sy,int xs,int ys,int dx,int dy);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_putSP: スロットデータをスプライト領域へ転送する
 * 引数: vge_putBGと同じ
 * 解説: スプライトは、一度表示したら消える妖精のような存在
 *----------------------------------------------------------------------------
 */
void vge_putSP(unsigned char n,int sx,int sy,int xs,int ys,int dx,int dy);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_putSPX: スロットデータをスプライト領域へ転送する(当り判定付き)
 * 引数: vge_putBGと同じ + (px,py)=当たり判定をする点の位置
 * 解説: スプライトは、一度表示したら消える妖精のような存在
 *----------------------------------------------------------------------------
 */
int vge_putSPX(unsigned char n,int sx,int sy,int xs,int ys,int dx,int dy,int px,int py);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_putSPM: スロットデータ(mask)をスプライト領域へ転送する
 * 引数: vge_putBGと同じ + maskカラー(c)
 * 解説: スプライトは、一度表示したら消える妖精のような存在
 *----------------------------------------------------------------------------
 */
void vge_putSPM(unsigned char n,int sx,int sy,int xs,int ys,int dx,int dy,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_putSP: スロットデータをスプライト領域へ転送する
 * 引数: vge_putBGと同じ
 * 解説: スプライトは、一度表示したら消える妖精のような存在
 *----------------------------------------------------------------------------
 */
void vge_putSPH(unsigned char n,int sx,int sy,int xs,int ys,int dx,int dy);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_putSPM: スロットデータ(mask)をスプライト領域へ転送する
 * 引数: vge_putBGと同じ + maskカラー(c)
 * 解説: スプライトは、一度表示したら消える妖精のような存在
 *----------------------------------------------------------------------------
 */
void vge_putSPMH(unsigned char n,int sx,int sy,int xs,int ys,int dx,int dy,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_putSP: スロットデータをスプライト領域へ転送する
 * 引数: vge_putBGと同じ
 * 解説: スプライトは、一度表示したら消える妖精のような存在
 *----------------------------------------------------------------------------
 */
void vge_putSPD(unsigned char n,int sx,int sy,int xs,int ys,int dx,int dy);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_clear: BGを指定パレット番号でクリアする
 *----------------------------------------------------------------------------
 * 引数:
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_clear(unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_scroll: BGをスクロールさせる
 *----------------------------------------------------------------------------
 * 引数:
 * - x [I] X方向(正=右スクロール、負=左スクロール)
 * - y [I] Y方向(正=下スクロール、負=上スクロール)
 *----------------------------------------------------------------------------
 * 解説:
 * - スクロール後の領域はパレット0でクリア
 *----------------------------------------------------------------------------
 */
void vge_scroll(int x,int y);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_pixelBG: BG面にピクセルを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - x [I] X座標
 * - y [I] Y座標
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_pixelBG(int x,int y,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_pixelSP: スプライト面にピクセルを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - x [I] X座標
 * - y [I] Y座標
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_pixelSP(int x,int y,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_lineBG: BG面にラインを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - fx [I] X座標(基点)
 * - fy [I] Y座標(基点)
 * - tx [I] X座標(終点)
 * - ty [I] Y座標(終点)
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_lineBG(int fx,int fy,int tx,int ty,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_lineSP: スプライト面にラインを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - fx [I] X座標(基点)
 * - fy [I] Y座標(基点)
 * - tx [I] X座標(終点)
 * - ty [I] Y座標(終点)
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_lineSP(int fx,int fy,int tx,int ty,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_circleBG: BG面にサークルを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - x [I] X座標(基点)
 * - y [I] Y座標(基点)
 * - r [I] 半径
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_circleBG(int x,int y,int r,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_circleSP: スプライト面にサークルを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - x [I] X座標(基点)
 * - y [I] Y座標(基点)
 * - r [I] 半径
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_circleSP(int x,int y,int r,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_boxBG: BG面にボックスを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - fx [I] X座標(基点)
 * - fy [I] Y座標(基点)
 * - tx [I] X座標(終点)
 * - ty [I] Y座標(終点)
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_boxBG(int fx,int fy,int tx,int ty,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_boxSP: スプライト面にボックスを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - fx [I] X座標(基点)
 * - fy [I] Y座標(基点)
 * - tx [I] X座標(終点)
 * - ty [I] Y座標(終点)
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_boxSP(int fx,int fy,int tx,int ty,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_boxBG: BG面に塗りつぶしボックスを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - fx [I] X座標(基点)
 * - fy [I] Y座標(基点)
 * - tx [I] X座標(終点)
 * - ty [I] Y座標(終点)
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_boxfBG(int fx,int fy,int tx,int ty,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_boxfSP: スプライト面に塗りつぶしボックスを描画する
 *----------------------------------------------------------------------------
 * 引数:
 * - fx [I] X座標(基点)
 * - fy [I] Y座標(基点)
 * - tx [I] X座標(終点)
 * - ty [I] Y座標(終点)
 * - c [I] パレット番号
 *----------------------------------------------------------------------------
 */
void vge_boxfSP(int fx,int fy,int tx,int ty,unsigned char c);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] タッチパネルの状態を取得
 *----------------------------------------------------------------------------
 * 引数:
 * - s [O] タッチパネルを押した状態か否か（非タッチ0, タッチ中: フレーム数）
 * - cx [O] 現在のX座標（非タッチ中は不定）
 * - cy [O] 現在のY座標（非タッチ中は不定）
 * - dx [O] X方向の移動距離（非タッチ中は不定）
 * - dy [O] Y方向の移動距離（非タッチ中は不定）
 *----------------------------------------------------------------------------
 */
void vge_touch(int* s,int* cx,int* cy,int* dx,int* dy);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_eload: 効果音(独自形式)をスロットにロードする
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] スロット番号
 * - name [I] ファイル名
 *----------------------------------------------------------------------------
 * 戻り値: 成功は0、失敗時は非0を返す.
 *----------------------------------------------------------------------------
 */
int vge_eload(unsigned char n,const char* name);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_eff: 効果音を鳴らす
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] スロット番号
 *----------------------------------------------------------------------------
 * 戻り値: なし
 *----------------------------------------------------------------------------
 */
void vge_eff(unsigned char n);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_effstop: 効果音を止める
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] スロット番号
 *----------------------------------------------------------------------------
 * 戻り値: なし
 *----------------------------------------------------------------------------
 */
void vge_effstop(unsigned char n);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_effstopA: 全ての効果音を止める
 *----------------------------------------------------------------------------
 * 引数: なし
 *----------------------------------------------------------------------------
 * 戻り値: なし
 *----------------------------------------------------------------------------
 */
void vge_effstopA();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_setmute: 音を消す / 鳴らすの設定
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] 非0=ミュート、0=発音
 *----------------------------------------------------------------------------
 * 戻り値: なし
 *----------------------------------------------------------------------------
 */
void vge_setmute(unsigned char n);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_setmuteCh: チャネル毎の音を消す / 鳴らすの設定
 *----------------------------------------------------------------------------
 * 引数:
 * - ch [I] チャネル番号(0〜5)
 * - n [I] 非0=ミュート、0=発音
 *----------------------------------------------------------------------------
 * 戻り値: なし
 *----------------------------------------------------------------------------
 */
void vge_setmuteCh(unsigned char ch,unsigned char n);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_getmute: 音を消す / 鳴らすの設定を取得
 *----------------------------------------------------------------------------
 * 戻り値: 非0=ミュート、0=発音
 *----------------------------------------------------------------------------
 */
unsigned char vge_getmute();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_bload: BGM(独自形式)をスロットにロードする
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] スロット番号
 * - name [I] ファイル名
 *----------------------------------------------------------------------------
 * 戻り値: 成功は0、失敗時は非0を返す.
 *----------------------------------------------------------------------------
 */
int vge_bload(unsigned char n,const char* name);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_bplay: BGMを演奏する
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] スロット番号
 *----------------------------------------------------------------------------
 */
void vge_bplay(unsigned char n);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_bchk: BGMがロードされているかチェックする
 *----------------------------------------------------------------------------
 * 引数:
 * - n [I] スロット番号
 *----------------------------------------------------------------------------
 */
int vge_bchk(unsigned char n);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_bstop: BGMの演奏を中断する
 *----------------------------------------------------------------------------
 */
void vge_bstop();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_bresume: BGMの演奏を中断したところから再開する
 *----------------------------------------------------------------------------
 */
void vge_bresume();

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_bfade: BGMを指定周波数の間隔でフェードアウト
 *----------------------------------------------------------------------------
 */
void vge_bfade(unsigned int hz);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_setPause: ポーズ状態の設定・解除
 *----------------------------------------------------------------------------
 * 引数:
 * - p [I] ポーズ状態
 *----------------------------------------------------------------------------
 */
void vge_setPause(unsigned char p);

/*
 *----------------------------------------------------------------------------
 * [VGE-API] vge_filemode: ファイルモードかどうかチェックする
 * ※ファイルモードの場合、ディレクトリ指定不可
 *----------------------------------------------------------------------------
 */
int vge_filemode();

#ifdef __cplusplus
};
#endif

#endif
